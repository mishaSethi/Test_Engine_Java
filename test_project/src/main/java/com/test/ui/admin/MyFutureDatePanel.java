/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.test.ui.admin;

import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 *
 * @author user
 */
public class MyFutureDatePanel extends javax.swing.JPanel {

    GregorianCalendar gcal;

    public MyFutureDatePanel() {
        initComponents();
        jcbyear.removeAllItems();
        jcbyear.addItem("Year");
        jcbmonth.removeAllItems();
        jcbmonth.addItem("Month");
        jcbdate.removeAllItems();
        jcbdate.addItem("Date");
        gcal = new GregorianCalendar();
        int currentyear = gcal.get(Calendar.YEAR);
        int futureyear = currentyear + 1;
        for (int i = currentyear; i <= futureyear; i++) {
            jcbyear.addItem(String.valueOf(i));

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbyear = new javax.swing.JComboBox<>();
        jcbmonth = new javax.swing.JComboBox<>();
        jcbdate = new javax.swing.JComboBox<>();

        jcbyear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbyear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbyearItemStateChanged(evt);
            }
        });
        jcbyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbyearActionPerformed(evt);
            }
        });

        jcbmonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmonthItemStateChanged(evt);
            }
        });

        jcbdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcbyear, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbdate, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jcbmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jcbyear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jcbdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbyearActionPerformed

    }//GEN-LAST:event_jcbyearActionPerformed

    private void jcbyearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbyearItemStateChanged
       int monthindex = jcbmonth.getSelectedIndex();
        int dateindex = jcbdate.getSelectedIndex();
        jcbmonth.removeAllItems();
        jcbmonth.addItem("Month");
        if (jcbyear.getSelectedIndex() > 0) {
            int selectedyear = Integer.parseInt(jcbyear.getSelectedItem().toString());
            MonthNames[] months = MonthNames.values();
            int currentindex=0;
            int lastindex = months.length - 1;
            int currentyear = gcal.get(Calendar.YEAR);
            if (selectedyear == currentyear) {
                currentindex=gcal.get(Calendar.MONTH);
            }
            for(int index=currentindex;index<=lastindex;index++){
                jcbmonth.addItem(months[index].toString());
            }
            if (monthindex <jcbmonth.getItemCount()) {
                jcbmonth.setSelectedIndex(monthindex);
            }
             if (dateindex < jcbdate.getItemCount()) {
                jcbdate.setSelectedIndex(dateindex);
            }
                    
        }

    }//GEN-LAST:event_jcbyearItemStateChanged
     public Date getSelectedDate() {
        Date selecteddate = null;
        try {
            if (jcbyear.getSelectedIndex() > 0 && jcbmonth.getSelectedIndex() > 0 && jcbdate.getSelectedIndex() > 0) {
                String datevalue = "";
                datevalue = jcbyear.getSelectedItem().toString() + "-";
                MonthNames mon = MonthNames.valueOf(jcbmonth.getSelectedItem().toString());
                int month = mon.ordinal() + 1;
                int date = Integer.parseInt(jcbdate.getSelectedItem().toString());
                datevalue += month + "-" + date;
                selecteddate = Date.valueOf(datevalue);
            }

        } catch (Exception ex) {

        }
        return selecteddate;
    }
    private void jcbmonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmonthItemStateChanged
       int dateindex = jcbdate.getSelectedIndex();
        jcbdate.removeAllItems();
        jcbdate.addItem("Date");
        if (jcbyear.getSelectedIndex() > 0 && jcbmonth.getSelectedIndex() > 0) {
            MonthNames selectedmonth = MonthNames.valueOf(jcbmonth.getSelectedItem().toString());
            int selectedyear = Integer.parseInt(jcbyear.getSelectedItem().toString());
            int daterange = 31;
            int start=1;
            int currentyear = gcal.get(Calendar.YEAR);
            int currentmonth = gcal.get(Calendar.MONTH);
            if (selectedyear == currentyear && currentmonth == selectedmonth.ordinal()) {
                start=gcal.get(Calendar.DATE);
            } else {
                switch (selectedmonth) {
                    case April:
                    case June:
                    case September:
                    case November:
                        daterange = 30;
                        break;
                    case February:
                        daterange = gcal.isLeapYear(selectedyear) ? 29 : 28;
                        break;
                }
            }
            for (int day = start; day <= daterange; day++) {
                jcbdate.addItem(String.valueOf(day));
            }
            if (dateindex < jcbdate.getItemCount()) {
                jcbdate.setSelectedIndex(dateindex);
            }
        }
    }//GEN-LAST:event_jcbmonthItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jcbdate;
    private javax.swing.JComboBox<String> jcbmonth;
    private javax.swing.JComboBox<String> jcbyear;
    // End of variables declaration//GEN-END:variables
}
