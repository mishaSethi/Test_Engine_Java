/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.test.ui.admin;

import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 *
 * @author Grapess2
 */
public class MyDatePanel extends javax.swing.JPanel {

    GregorianCalendar gcal;

    public MyDatePanel() {
        initComponents();
        jcbYear.removeAllItems();
        jcbYear.addItem("Year");
        jcbMonth.removeAllItems();
        jcbMonth.addItem("Month");
        jcbDate.removeAllItems();
        jcbDate.addItem("Date");
        gcal = new GregorianCalendar();
        int currentyear = gcal.get(Calendar.YEAR);
        int endyear = currentyear - 20;
        for (int year = currentyear; year >= endyear; year--) {
            jcbYear.addItem(String.valueOf(year));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbYear = new javax.swing.JComboBox<>();
        jcbMonth = new javax.swing.JComboBox<>();
        jcbDate = new javax.swing.JComboBox<>();

        jcbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbYearItemStateChanged(evt);
            }
        });

        jcbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMonthItemStateChanged(evt);
            }
        });
        jcbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMonthActionPerformed(evt);
            }
        });

        jcbDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jcbYear, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jcbMonth)
                    .addComponent(jcbDate))
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbYearItemStateChanged
        int monthindex = jcbMonth.getSelectedIndex();
        int dateindex = jcbDate.getSelectedIndex();
        jcbMonth.removeAllItems();
        jcbMonth.addItem("Month");
        if (jcbYear.getSelectedIndex() > 0) {
            int selectedyear = Integer.parseInt(jcbYear.getSelectedItem().toString());
            MonthNames[] allmonths = MonthNames.values();
            int lastindex = allmonths.length - 1;
            int currentyear = gcal.get(Calendar.YEAR);
            if (selectedyear == currentyear) {
                lastindex = gcal.get(Calendar.MONTH);
            }
            for (int index = 0; index <= lastindex; index++) {
                jcbMonth.addItem(allmonths[index].toString());
            }
            if (monthindex < jcbMonth.getItemCount()) {
                jcbMonth.setSelectedIndex(monthindex);
            }
            if (dateindex < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(dateindex);
            }
        }
    }//GEN-LAST:event_jcbYearItemStateChanged

    private void jcbMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMonthItemStateChanged
        int dateindex = jcbDate.getSelectedIndex();
        jcbDate.removeAllItems();
        jcbDate.addItem("Date");
        if (jcbYear.getSelectedIndex() > 0 && jcbMonth.getSelectedIndex() > 0) {
            MonthNames selectedmonth = MonthNames.valueOf(jcbMonth.getSelectedItem().toString());
            int selectedyear = Integer.parseInt(jcbYear.getSelectedItem().toString());
            int daterange = 31;
            int currentyear = gcal.get(Calendar.YEAR);
            int currentmonth = gcal.get(Calendar.MONTH);
            if (selectedyear == currentyear && currentmonth == selectedmonth.ordinal()) {
                daterange = gcal.get(Calendar.DATE);
            } else {
                switch (selectedmonth) {
                    case April:
                    case June:
                    case September:
                    case November:
                        daterange = 30;
                        break;
                    case February:
                        daterange = gcal.isLeapYear(selectedyear) ? 29 : 28;
                        break;
                }
            }
            for (int day = 1; day <= daterange; day++) {
                jcbDate.addItem(String.valueOf(day));
            }
            if (dateindex < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(dateindex);
            }
        }
    }//GEN-LAST:event_jcbMonthItemStateChanged

    private void jcbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMonthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbMonthActionPerformed

    public Date getSelectedDate() {
        Date selecteddate = null;
        try {
            if (jcbYear.getSelectedIndex() > 0 && jcbMonth.getSelectedIndex() > 0 && jcbDate.getSelectedIndex() > 0) {
                String datevalue = "";
                datevalue = jcbYear.getSelectedItem().toString() + "-";
                datevalue += jcbMonth.getSelectedIndex() + "-" + jcbDate.getSelectedIndex();
                selecteddate = Date.valueOf(datevalue);
            }

        } catch (Exception ex) {

        }
        return selecteddate;
    }

    public void setDate(Date datevalue) {
        try {
            String[] datepart = datevalue.toString().split("-");
            int year = Integer.parseInt(datepart[0]);
            int month = Integer.parseInt(datepart[1]);
            int date = Integer.parseInt(datepart[2]);
            for (int i = 1; i < jcbYear.getItemCount(); i++) {
                int value = Integer.parseInt(jcbYear.getItemAt(i).toString());
                if (value == year) {
                    jcbYear.setSelectedIndex(i);
                    break;
                }
            }
            if (month < jcbMonth.getItemCount()) {
                jcbMonth.setSelectedIndex(month);
            }
            if (date < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(date);
            }
        } catch (Exception ex) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jcbDate;
    private javax.swing.JComboBox<String> jcbMonth;
    private javax.swing.JComboBox<String> jcbYear;
    // End of variables declaration//GEN-END:variables
}
